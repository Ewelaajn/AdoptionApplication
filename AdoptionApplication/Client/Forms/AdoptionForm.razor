@page "/animal/{id:int}/adoptionForm"
@inject IAnimalService AnimalService
@inject IAdoptionFormService AdoptionFormService
@inject IToastService ToastService

@if (animal != null)
{
    <div class="animal-details shadow p-1 mb-3 bg-white rounded text-center">
        <h2 class="animal-name">Formularz adopcyjny @animal.Name</h2>
    </div>
    <img class="animal-image" src="@animal.Image" alt="@animal.Name" />
}
else
{
    <div class="alert alert-danger" role="alert">
        Wczytywanie formularza...
    </div>
}

@if (showErrorMessage)
{
    <div class="d-flex flex-column align-items-start">
        <div class="alert alert-danger mb-3 p-2 text-center">
            @ErrorMessagesConstants.ValidationFailed
        </div>
        <button class="btn btn-primary align-self-start px-4" onclick="location.reload()">
            <span class="d-flex align-items-center justify-content-center h-100">Odśwież</span>
        </button>
    </div>
}
else if (internalError)
{
    <div class="d-flex flex-column align-items-start">
        <div class="alert alert-danger mb-3 p-2 text-center">
            @ErrorMessagesConstants.InternalError
        </div>
        <button class="btn btn-primary align-self-start px-4" onclick="location.reload()">
            <span class="d-flex align-items-center justify-content-center h-100">Odśwież</span>
        </button>
    </div>
}
else if (IsSubmitted)
{
    <div class="alert alert-success" role="alert">
        Formularz został wysłany!
    </div>
}
else if (IsSubmitting)
{
     <div class="alert alert-info" role="alert">
        Wysyłanie formularza...
    </div>
}
else
{
    <div class="container">
    <div class="form-container">
        <form>
            <div class="form-group">
                <label for="Imię">Imię:</label>
                <input type="text" class="form-control" id="Imię" name="Imię" @bind="@adoptionForm.FirstName">
                @if (string.IsNullOrWhiteSpace(adoptionForm.FirstName))
                {
                    <div class="invalid-feedback">
                        @ErrorMessagesConstants.EmptyField
                    </div>
                }
            </div>
            <div class="form-group">
                <label for="Nazwisko">Nazwisko:</label>
                <input type="text" class="form-control" id="Nazwisko" name="Nazwisko" @bind="@adoptionForm.LastName">
                @if (string.IsNullOrWhiteSpace(adoptionForm.LastName))
                {
                    <div class="invalid-feedback">
                        @ErrorMessagesConstants.EmptyField
                    </div>
                }
            </div>
            <div class="form-group">
                <label for="Wiek">Wiek:</label>
                <input type="number" class="form-control" id="Wiek" name="Wiek" @bind="@adoptionForm.Age">
                @if (string.IsNullOrWhiteSpace(adoptionForm.Age))
                {
                    <div class="invalid-feedback">
                        @ErrorMessagesConstants.AgeFormInfo
                    </div>
                }
            </div>
            <div class="form-group">
                <label for="Email">Email:</label>
                <input type="email" class="form-control" id="Email" name="Email" @bind="@adoptionForm.Email">
                @if (string.IsNullOrWhiteSpace(adoptionForm.Email))
                {
                    <div class="invalid-feedback">
                        @ErrorMessagesConstants.EmailFormInfo
                    </div>
                }
            </div>
            <div class="form-group">
                <label for="NumerTelefonu">Numer telefonu:</label>
                <input type="tel" class="form-control" id="NumerTelefonu" name="NumerTelefonu" @bind="@adoptionForm.PhoneNumber">
                @if (string.IsNullOrWhiteSpace(adoptionForm.PhoneNumber))
                {
                    <div class="invalid-feedback">
                        @ErrorMessagesConstants.PhoneNumberFormInfo
                    </div>
                }
            </div>
            <div class="form-group">
                <label for="OMnie">O mnie:</label>
                <textarea class="form-control" id="OMnie" name="OMnie" rows="3" @bind="@adoptionForm.AboutMe"></textarea>
                @if (string.IsNullOrWhiteSpace(adoptionForm.AboutMe))
                {
                    <div class="invalid-feedback">
                        @ErrorMessagesConstants.EmptyField
                    </div>
                }
            </div>
            <div class="ml-auto">
                @if (string.IsNullOrWhiteSpace(adoptionForm.AboutMe)
                     || string.IsNullOrWhiteSpace(adoptionForm.PhoneNumber)
                     || string.IsNullOrWhiteSpace(adoptionForm.Email)
                     || string.IsNullOrWhiteSpace(adoptionForm.Age)
                     || string.IsNullOrWhiteSpace(adoptionForm.LastName)
                     || string.IsNullOrWhiteSpace(adoptionForm.FirstName))
                {
                    formValid = false;
                }
                else
                {
                    formValid = true;
                }
                <div class="alert alert-danger d-none" @bind:hidden="@showSuccessMessage" id="error-message">
                    @ErrorMessagesConstants.ValidationFailed
                </div>
                <div class="alert alert-success d-none" @bind:hidden="@showErrorMessage" id="success-message">
                    Formularz został wysłany
                </div>
                <button type="submit" class="btn btn-primary adoption-submit-btn" disabled="@(!formValid)" @onclick="HandleSubmit">Zatwierdź</button>
            </div>
        </form>
    </div>
    </div>
}

@code {
    private UserAdoptionForm adoptionForm = new UserAdoptionForm();
    private Animal animal = null;
    private bool formValid = true;
    private bool showErrorMessage = false;
    private bool showSuccessMessage = false;
    private bool internalError = false;
    private bool IsSubmitting = false;
    private bool IsSubmitted = false;

    [Parameter]
    public int Id { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        animal = await AnimalService.GetAnimalAsync(Id);
        if (animal != null)
        {
            adoptionForm = new UserAdoptionForm();
            adoptionForm.AnimalId = Id;
        }
        else
        {
            internalError = true;
            StateHasChanged();
            await Task.Delay(3000);
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleSubmit()
    {
        IsSubmitting = true;
        StateHasChanged();

        try
        {
            IsSubmitting = true;
            StateHasChanged();

            var result = await AdoptionFormService.AddNewForm(adoptionForm);

            if(result != null)
            {
                IsSubmitting = false;
                IsSubmitted = true;
                showErrorMessage = false;
                showSuccessMessage = true;
                StateHasChanged();
                ToastService.ShowSuccess("Pomyślnie wysłano formularz adopcyjny");
                await Task.Delay(1000);
                Navigation.NavigateTo("/");
            }
            else if (result == null)
            {
                IsSubmitting = false;
                showErrorMessage = true;
                showSuccessMessage = false;
                StateHasChanged();
                ToastService.ShowError("Coś poszło nie tak podczas wysłania formularza. Spróbuj ponownie.");
                await Task.Delay(3000);
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Coś poszło nie tak podczas wysłania formularza. Spróbuj ponownie.");
            await Task.Delay(2000);
            Navigation.NavigateTo(Navigation.Uri, true);
        }
    }
}