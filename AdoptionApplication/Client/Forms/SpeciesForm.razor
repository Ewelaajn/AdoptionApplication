@page "/animal/species"
@inject ISpeciesService SpeciesService

@if (showErrorMessage)
{
    <div class="d-flex flex-column align-items-start">
        <div class="alert alert-danger mb-3 p-2 text-center">
            @ErrorMessagesConstants.ValidationFailed
        </div>
        <button class="btn btn-primary align-self-start px-4" onclick="location.reload()">
            <span class="d-flex align-items-center justify-content-center h-100">Odśwież</span>
        </button>
    </div>
}
else if (internalError)
{
    <div class="d-flex flex-column align-items-start">
        <div class="alert alert-danger mb-3 p-2 text-center">
            @ErrorMessagesConstants.InternalError
        </div>
        <button class="btn btn-primary align-self-start px-4" onclick="location.reload()">
            <span class="d-flex align-items-center justify-content-center h-100">Odśwież</span>
        </button>
    </div>
}
else if (showSuccessMessage)
{
    <div class="alert alert-success" role="alert">
        Nowy gatunek został dodany!
    </div>
}
else
{
<div class="container">
    <div class="card">
        <div class="card-header">
            <h1 class="text-center display-4">Dodaj nowy gatunek zwierzęcia</h1>
        </div>
        <div class="card-body">
            <form class="form" @onsubmit="AddSpecies">
                <div class="form-group">
                    <label for="nazwa">Nazwa:</label>
                    <input type="text" class="form-control" id="nazwa" @bind="@newSpecies.Name" required>
                    @if (string.IsNullOrWhiteSpace(newSpecies.Name))
                    {
                        <div class="invalid-feedback">
                            @ErrorMessagesConstants.EmptyField
                        </div>
                        formValid = false;
                    }
                    else
                    {
                        formValid = true;
                    }
                </div>
                <div class="form-group">
                    <label for="url">Url:</label>
                    <input type="text" class="form-control" id="url" @bind="@newSpecies.Url" required>
                    @if (string.IsNullOrWhiteSpace(newSpecies.Url))
                    {
                        <div class="invalid-feedback">
                            @ErrorMessagesConstants.EmptyField
                        </div>
                        formValid = false;
                    }
                    else
                    {
                        formValid = true;
                    }
                </div>
                <div class="form-group">
                    <label for="ikona">Ikona:</label>
                    <input type="text" class="form-control" id="ikona" @bind="@newSpecies.Icon" required>
                    @if (string.IsNullOrWhiteSpace(newSpecies.Icon))
                    {
                        <div class="invalid-feedback">
                            @ErrorMessagesConstants.EmptyField
                        </div>
                        formValid = false;
                    }
                    else
                    {
                        formValid = true;
                    }
                </div>
                <button type="submit" class="btn btn-primary" disabled="@(!formValid)">
                    <span class="oi oi-plus"></span> Dodaj
                </button>
            </form>
        </div>
    </div>
</div>
}

@code {
    private Species newSpecies = new Species();
    private bool formValid = true;
    private bool showErrorMessage = false;
    private bool showSuccessMessage = false;
    private bool internalError = false;

    [Inject]
    public NavigationManager Navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        newSpecies = new Species();
    }

    private async Task AddSpecies()
    {
        try
        {
            var result = await SpeciesService.UpsertSpecies(newSpecies);
            if (result != null)
            {
                showErrorMessage = false;
                showSuccessMessage = true;
                StateHasChanged();
                await Task.Delay(3000);
                Navigation.NavigateTo("/");
            }
            else if (result == null)
            {
                showErrorMessage = true;
                showSuccessMessage = false;
                StateHasChanged();
                await Task.Delay(3000);
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception)
        {
            internalError = true;
            StateHasChanged();
            await Task.Delay(3000);
            Navigation.NavigateTo("/");
        }
   }
}
