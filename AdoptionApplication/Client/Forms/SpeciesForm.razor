@page "/animal/species"
@page "/animal/species/{id}"
@inject ISpeciesService SpeciesService
@inject IToastService ToastService

@if (_showErrorMessage)
{
    <div class="d-flex flex-column align-items-start">
        <div class="alert alert-danger mb-3 p-2 text-center">
            @_newSpecies.ErrorMessage
        </div>
        <button class="btn btn-primary align-self-start px-4" onclick="location.reload()">
            <span class="d-flex align-items-center justify-content-center h-100">Odśwież</span>
        </button>
    </div>
}
else if (_internalError)
{
    <div class="d-flex flex-column align-items-start">
        <div class="alert alert-danger mb-3 p-2 text-center">
            @ErrorMessagesConstants.InternalError
        </div>
        <button class="btn btn-primary align-self-start px-4" onclick="location.reload()">
            <span class="d-flex align-items-center justify-content-center h-100">Odśwież</span>
        </button>
    </div>
}
else if (_showSuccessMessage)
{
    <div class="alert alert-success" role="alert">
        Operacja przebiegła pomyślnie!
    </div>
}
else
{
<div class="container">
    <div class="card">
        <div class="card-header">
            @if (string.IsNullOrWhiteSpace(Id))
            {
                <h1 class="text-center display-4" style="font-family: Arial, sans-serif; font-size: 2.5rem; color: #555;">Dodaj nowy gatunek zwierzęcia</h1>
            }
            else
            {
                <h1 class="text-center display-4" style="font-family: Arial, sans-serif; font-size: 2.5rem; color: #555;">Aktualizuj gatunek zwierzęcia</h1>
            }
        </div>
        <div class="card-body">
            <form class="form" @onsubmit="AddSpecies" @onchange="StateHasChanged">
                <div class="form-group">
                    <label for="nazwa">Nazwa:</label>
                    <input type="text" class="form-control form-control-lg" id="nazwa" @bind="@_newSpecies.Name" required/>
                    @if (string.IsNullOrWhiteSpace(_newSpecies.Name))
                    {
                        <div class="invalid-feedback">
                            @ErrorMessagesConstants.EmptyField
                        </div>
                    }
                </div>
                <div class="form-group">
                    <label for="url">Url:</label>
                    <input type="text" class="form-control form-control-lg" id="url" @bind="@_newSpecies.Url" required/>
                    @if (string.IsNullOrWhiteSpace(_newSpecies.Url))
                    {
                        <div class="invalid-feedback">
                            @ErrorMessagesConstants.EmptyField
                        </div>
                    }
                </div>
                <div class="form-group">
                    <label for="ikona">Ikona:</label>
                    <input type="text" class="form-control form-control-lg" id="ikona" @bind="@_newSpecies.Icon" required/>
                    @if (string.IsNullOrWhiteSpace(_newSpecies.Icon))
                    {
                        <div class="invalid-feedback">
                            @ErrorMessagesConstants.IkonFormInfo
                        </div>
                    }
                </div>
                <div class="text-center">
                    @if (string.IsNullOrWhiteSpace(_newSpecies.Icon) || string.IsNullOrWhiteSpace(_newSpecies.Url)
                         || string.IsNullOrWhiteSpace(_newSpecies.Name))
                    {
                        _formValid = false;
                    }
                    else
                    {
                        _formValid = true;
                    }
                    @if (string.IsNullOrWhiteSpace(Id))
                    {
                        <button type="submit" class="btn btn-custom" disabled="@(!_formValid)">
                            <span class="oi oi-plus"></span> Dodaj
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-custom" disabled="@(!_formValid)">
                            <span class="oi oi-plus"></span> Aktualizuj
                        </button>
                    }
                    <button type="button" class="btn btn-custom ml-2" @onclick="Cancel">
                        <i class="fas fa-times"></i> Anuluj
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
}

@code {
    private Species? _newSpecies = new Species();
    private bool _formValid = true;
    private bool _showErrorMessage = false;
    private bool _showSuccessMessage = false;
    private bool _internalError = false;
    [Parameter]
    public string Id { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; }

    [CascadingParameter] 
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if(string.IsNullOrWhiteSpace(Id))
            _newSpecies = new Species();
        else
        {
            _newSpecies = await SpeciesService.GetSpecies(Int32.Parse(Id));
        }
    }

    private async Task AddSpecies()
    {
        try
        {
            var result = await SpeciesService.UpsertSpecies(_newSpecies);
            if (string.IsNullOrWhiteSpace(result?.ErrorMessage))
            {
                _showErrorMessage = false;
                _showSuccessMessage = true;
                await BlazoredModal.CloseAsync(ModalResult.Ok(_newSpecies.Name));
                StateHasChanged();
                ToastService.ShowSuccess("Aktualizacja gatunków przebiegła pomyślnie.");
                await Task.Delay(1500);
                Navigation.NavigateTo(Navigation.Uri, true);
            }
            else if (!string.IsNullOrWhiteSpace(result.ErrorMessage))
            {
                _showErrorMessage = true;
                _showSuccessMessage = false;
                StateHasChanged();
                ToastService.ShowError(result.ErrorMessage);
                await Task.Delay(1500);
                Navigation.NavigateTo("/");
                await BlazoredModal.CancelAsync();
            }
        }
        catch (Exception ex)
        {
            _internalError = true;
            StateHasChanged();
            ToastService.ShowError(ex.Message);
            await Task.Delay(1500);
            Navigation.NavigateTo("/");
            await BlazoredModal.CancelAsync();
        }
   }

    private async Task Cancel() => await BlazoredModal.CancelAsync();
}
