@page "/animal/all"
@using FluentValidation
@inject IAnimalService AnimalService
@inject NavigationManager NavigationManager
@inject IToastService ToastService
<ul class="list-unstyled col-8">
    <div class="shadow p-3 mb-5 bg-white rounded text-center my-5">
        <h1>Zwierzęta do adopcji</h1>
    </div>
</ul>

<div class="form-row">
    <div class="form-group col-md-3 col-lg-2">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownCityButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Miasto
            </button>
            <div class="dropdown-menu w-100" aria-labelledby="dropdownCityButton">
                <button class="dropdown-item" @onclick="() => UpdateCity(null)">Wszystkie</button>
                @foreach (var city in Cities)
                {
                    <button class="dropdown-item" @onclick="() => UpdateCity(city)">@city</button>
                }
            </div>
        </div>
        @if (_city != null)
        {
            <p class="btn btn-secondary btn-light w-100">@_city</p>
        }
    </div>
    <div class="form-group col-md-3 col-lg-2">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownProvinceButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Województwo
            </button>
            <div class="dropdown-menu w-100" aria-labelledby="dropdownProvinceButton">
                <button class="dropdown-item" @onclick="() => UpdateProvince(null)">Wszystkie</button>
                @foreach (var province in Provinces)
                {
                    <button class="dropdown-item" @onclick="() => UpdateProvince(province)">@province</button>
                }
            </div>
        </div>
        @if (_province != null)
        {
            <p class="btn btn-secondary btn-light w-100">@_province</p>
        }
    </div>
    <div class="form-group col-md-3 col-lg-2">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownAdoptionStatusButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Status adopcji
            </button>
            <div class="dropdown-menu w-100" aria-labelledby="dropdownAdoptionStatusButton">
                <button class="dropdown-item" @onclick="() => UpdateAdoptionStatus(null)">Wszystkie</button>
                <button class="dropdown-item" @onclick="() => UpdateAdoptionStatus(AdoptionStatusConstants.Adopted)">Adoptowane</button>
                <button class="dropdown-item" @onclick="() => UpdateAdoptionStatus(AdoptionStatusConstants.ToAdopt)">Szukające domu</button>
            </div>
        </div>
        @if (_isAdopted.HasValue && _isAdopted == true)
        {
            <p class="btn btn-secondary btn-light w-100">@AdoptionStatusConstants.Adopted</p>
        }
        else if(_isAdopted.HasValue && _isAdopted == false)
        {
            <p class="btn btn-secondary btn-light w-100">@AdoptionStatusConstants.ToAdopt</p>
        }
    </div>
</div>
<ul class="list-unstyled col-8">
    <div class="add-animal-box">
        <h2>
            <a href="/animal/create" class="nav-link" style="cursor: pointer;">
                Dodaj nowe zwierzę do adopcji
            </a>
        </h2>
    </div>
    @foreach (var animal in AnimalService.Animals)
    {
        <li class="media my-3 bg-white rounded">
            <div class="media-img-wrapper mr-2">
                <a href="/animal/@animal.Id">
                    <img class="media-img" src="@animal.Image" alt="@animal.Name"/>
                </a>
            </div>
            <div class="media-body">
                <a href="/animal/@animal.Id">
                    <h4 class="mb-0">@animal.Name</h4>
                </a>
                <div class="text-info">Płeć: @animal.Gender</div>
                <div class="text-info">Miasto: @animal.City</div>
                <div class="text-info">Krótki opis: @animal.ShortDescription</div>
                @if (animal.HealthStatus == HealthStatusContants.Healthy)
                {
                    <div class="text-success">@animal.HealthStatus</div>
                }
                else
                {
                    <div class="text-danger">@animal.HealthStatus</div>
                }

                <div class="d-flex align-items-center justify-content-between mt-2">
                    @if (animal.IsAdopted == true)
                    {
                        @if (animal.Gender == GenderContants.Female)
                        {
                            <div class="badge badge-success">
                                <head>
                                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css"/>
                                </head>
                                <i class="fas fa-check"></i> @($"{AdoptionStatusConstants.SheAdopted}")
                            </div>
                        }
                        else
                        {
                            <div class="badge badge-success">
                                <head>
                                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css"/>
                                </head>
                                <i class="fas fa-check"></i> @($"{AdoptionStatusConstants.HeAdopted}")
                            </div>
                        }
                    }
                    else
                    {
                        <div class="badge badge-danger">
                            <head>
                                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css"/>
                            </head>
                            <i class="fas fa-times"></i> @($"{AdoptionStatusConstants.ToAdopt}")
                        </div>
                    }
                    <div class="d-flex">
                        <a href="/animal/update/@animal.Id" class="btn btn-sm btn-outline-secondary mr-2">
                            <i class="fas fa-pen"></i> Aktualizuj
                        </a>
                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="@(async () => await Delete(animal.Id))">
                            <i class="fas fa-trash"></i> Usuń
                        </button>
                    </div>
                </div>
            </div>
        </li>
    }
</ul>

<Pagination>
    <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
        <PaginationLink>
            <span aria-hidden="true">«</span>
        </PaginationLink>
    </PaginationItem>
    @{
        for (var i = 1; i <= _pageItems; i++)
        {
            var pageNumberAsString = i.ToString();
            <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                    @pageNumberAsString
                </PaginationLink>
            </PaginationItem>
        }
    }
    <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
        <PaginationLink>
            <span aria-hidden="true">»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

@code {
    private string _currentPage = "1";
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private int _pageItems = 1;
    private bool? _isAdopted;
    private string? _city;
    private string? _province;

    public List<string?> Provinces { get; set; } = new();
    public List<string?> Cities { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await AnimalService.LoadAnimalsAsyncForAll(null, null, null, null);
        Provinces = AnimalService.Animals.Select(x => x.Province).Distinct().ToList();
        Cities = AnimalService.Animals.Select(x => x.City).Distinct().ToList();
        _currentPage = "1";
        await UpdateAnimalList();
        StateHasChanged();
    }

    private async Task UpdateAnimalList()
    {
        var total = await AnimalService.LoadAnimalsAsyncForAll(Int32.Parse(_currentPage), _isAdopted, _city, _province);
        _pageItems = (int)Math.Round(total / (decimal) PaginationService.PageItems, MidpointRounding.ToPositiveInfinity);
    }

    private bool IsActive(string page)
    {
        return _currentPage == page;
    }

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return _currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return _currentPage.Equals(_pageItems.ToString());
        }
        return false;
    }

    private async Task Previous()
    {
        var currentPageAsInt = int.Parse(_currentPage);
        if (currentPageAsInt > 1)
        {
            _currentPage = (currentPageAsInt - 1).ToString();
            await UpdateAnimalList();
        }
    }

    private async Task Next()
    {
        var currentPageAsInt = int.Parse(_currentPage);
        if (currentPageAsInt < _pageItems)
        {
            _currentPage = (currentPageAsInt + 1).ToString();
            await UpdateAnimalList();
        }
    }

    private async Task SetActive(string page)
    {
        _currentPage = page;
        await UpdateAnimalList();
    }
    
    protected async Task UpdateAdoptionStatus(string? status)
    {
        if (string.IsNullOrWhiteSpace(status))
        {
            _isAdopted = null;
            await UpdateAnimalList();
            StateHasChanged();
        }
        else
        {
            if (status.Equals(AdoptionStatusConstants.Adopted))
            {
                _isAdopted = true;
                await UpdateAnimalList();
                StateHasChanged();
            }
            else if (status.Equals(AdoptionStatusConstants.ToAdopt))
            {
                _isAdopted = false;
                await UpdateAnimalList();
                StateHasChanged();
            }
            else
            {
                _isAdopted = null;
                await UpdateAnimalList();
                StateHasChanged();
            }
        }
    }

    protected async Task UpdateCity(string? chosenCity)
    {
        _city = chosenCity;
        await UpdateAnimalList();
        StateHasChanged();
    }
    
    protected async Task UpdateProvince(string? chosenProvince)
    {
        _province = chosenProvince;
        await UpdateAnimalList();
        StateHasChanged();
    }

    protected async Task Delete(int id)
    {
        try
        {
            await AnimalService.DeleteAnimal(id);
            ToastService.ShowSuccess("Pomyślnie usunięto zwierzę z listy");
            await Task.Delay(1000);
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Coś poszło nie tak, spróbuj ponownie później.");
        }
    }
}
