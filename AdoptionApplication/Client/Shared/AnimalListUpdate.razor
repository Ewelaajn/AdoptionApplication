@page "/animal/all"
@inject IAnimalService AnimalService

<div class="add-animal-box">
    <h2>
        <a href="/animal/create">
            Dodaj nowe zwierzę do adopcji
        </a>
    </h2>
</div>


<ul class="list-unstyled">
    @foreach (var animal in AnimalService.Animals)
    {
        <li class="media my-3">
            <div class="media-img-wrapper mr-2">
                <a href="/animal/@animal.Id">
                    <img class="media-img" src="@animal.Image" alt="@animal.Name" />
                </a>
            </div>
            <div class="media-body">
                <a href="/animal/@animal.Id">
                    <h4 class="mb-0">@animal.Name</h4>
                </a>
                <div class="text-info">Płeć: @animal.Gender</div>
                <div class="text-info">Miasto: @animal.City</div>
                <div class="text-info">Krótki opis: @animal.ShortDescription</div>
                @if (animal.HealthStatus == HealthStatusContants.Healthy)
                {
                    <div class="text-success">@animal.HealthStatus</div>
                }
                else
                {
                    <div class="text-danger">@animal.HealthStatus</div>
                }

                <div class="d-flex align-items-center justify-content-between mt-2">
                    @if (animal.IsAdopted == true)
                    {
                        @if (animal.Gender == GenderContants.Female)
                        {
                            <div class="badge badge-success">
                                <head>
                                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" />
                                </head>
                                <i class="fas fa-check"></i> @($"{AdoptionStatusConstants.SheAdopted}")
                            </div>
                        }
                        else
                        {
                            <div class="badge badge-success">
                                <head>
                                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" />
                                </head>
                                <i class="fas fa-check"></i> @($"{AdoptionStatusConstants.HeAdopted}")
                            </div>
                        }
                    }
                    else
                    {
                        <div class="badge badge-danger">
                            <head>
                                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" />
                            </head>
                            <i class="fas fa-times"></i> @($"{AdoptionStatusConstants.ToAdopt}")
                        </div>
                    }
                    <div class="d-flex">
                        <a href="/animal/update/@animal.Id" class="btn btn-sm btn-outline-secondary mr-2">
                            <i class="fas fa-pen"></i> Update
                        </a>
                        <button type="button" class="btn btn-sm btn-outline-danger">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        </li>
    }
</ul>

<Pagination>
    <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
        <PaginationLink>
            <span aria-hidden="true">«</span>
        </PaginationLink>
    </PaginationItem>
    @{
        for (var i = 1; i <= pageItems; i++)
        {
            var pageNumberAsString = i.ToString();
            <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                    @pageNumberAsString
                </PaginationLink>
            </PaginationItem>
        }
    }
    <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
        <PaginationLink>
            <span aria-hidden="true">»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

@code {
    private string currentPage = "1";
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private int pageItems = 1;

    protected override async Task OnInitializedAsync()
    {
        currentPage = "1";
        var total = await AnimalService.LoadAnimalsAsyncForAll(Int32.Parse(currentPage));
        pageItems = total / PaginationService.PageItems;
        StateHasChanged();
    }

    private bool IsActive(string page)
    {
        return currentPage == page;
    }

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private async Task Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
            await AnimalService.LoadAnimalsAsyncForAll(Int32.Parse(currentPage));
        }
    }

    private async Task Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems)
        {
            currentPage = (currentPageAsInt + 1).ToString();
            await AnimalService.LoadAnimalsAsyncForAll(Int32.Parse(currentPage));
        }
    }

    private void SetActive(string page)
        => currentPage = page;
}
