@inject IAnimalService AnimalService
@implements IDisposable

<div class="form-row">
    <div class="form-group col-md-1">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownCityButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Miasto
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownCityButton">
                <button class="dropdown-item" @onclick="() => UpdateCity(null)">Wszystkie</button>
                @foreach (var city in AnimalService.Animals.Select(x => x.City).Distinct().ToList())
                {
                    <button class="dropdown-item" @onclick="() => UpdateCity(city)">@city</button>
                }
            </div>
        </div>
    </div>
    <div class="form-group col-md-1">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownProvinceButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Województwo
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownProvinceButton">
                <button class="dropdown-item" @onclick="() => UpdateProvince(null)">Wszystkie</button>
                @foreach (var province in AnimalService.Animals.Select(x => x.Province).Distinct().ToList())
                {
                    <button class="dropdown-item" @onclick="() => UpdateProvince(province)">@province</button>
                }
            </div>
        </div>
    </div>
    <div class="form-group col-md-1">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownAdoptionStatusButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Status adopcji
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownAdoptionStatusButton">
                <button class="dropdown-item" @onclick="() => UpdateAdoptionStatus(null)">Wszystkie</button>
                <button class="dropdown-item" @onclick="() => UpdateAdoptionStatus(AdoptionStatusConstants.Adopted)">Adoptowane</button>
                <button class="dropdown-item" @onclick="() => UpdateAdoptionStatus(AdoptionStatusConstants.ToAdopt)">Szukające domu</button>
            </div>
        </div>
    </div>
</div>
<ul class="list-unstyled custom-list">
    @foreach (var animal in AnimalService.Animals.Where(x =>(isAdopted == null || x.IsAdopted == isAdopted.Value) &&(city == null || x.City == city) && (province == null || x.Province == province)))
    {
        <li class="media my-3 custom-media">
            <div class="media-img-wrapper mr-2 custom-media-img-wrapper">
                <a href="/animal/@animal.Id">
                    <img class="media-img custom-media-img" src="@animal.Image" alt="@animal.Name" />
                </a>
            </div>
            <div class="media-body custom-media-body">
                <a href="/animal/@animal.Id">
                    <h4 class="mb-0 custom-h4">@animal.Name</h4>
                </a>
                <div class="text-info custom-text-info">Płeć: @animal.Gender</div>
                <div class="text-info custom-text-info">Miasto: @animal.City</div>
                <div class="text-info custom-text-info">Krótki opis: @animal.ShortDescription</div>
                @if (animal.HealthStatus == HealthStatusContants.Healthy)
                {
                    <div class="text-success custom-text-success">@animal.HealthStatus</div>
                }
                else
                {
                    <div class="text-danger custom-text-danger">@animal.HealthStatus</div>
                }
                @if (animal.IsAdopted == true)
                {
                    @if (animal.Gender == GenderContants.Female)
                    {
                        <div class="badge badge-success mb-2 custom-badge">
                            <head>
                                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" />
                            </head>
                            <i class="fas fa-check"></i> @($"{AdoptionStatusConstants.SheAdopted}")
                        </div>
                    }
                    else
                    {
                        <div class="badge badge-success mb-2 custom-badge">
                            <head>
                                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" />
                            </head>
                            <i class="fas fa-check"></i> @($"{AdoptionStatusConstants.HeAdopted}")
                        </div>
                    }
                }
                else
                {
                    <div class="badge badge-danger mb-2 custom-badge">
                        <head>
                            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" />
                        </head>
                        <i class="fas fa-times"></i> @($"{AdoptionStatusConstants.ToAdopt}")
                    </div>
                }
            </div>
        </li>
    }
</ul>


@code {
    //[Parameter]
    //public int? SpeciesId { get; set; } = null;
    private bool? isAdopted = null;
    private string? city = null;
    private string? province = null;

    protected override void OnInitialized()
    {
        AnimalService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AnimalService.OnChange -= StateHasChanged;
    }

    protected async Task UpdateAdoptionStatus(string? status)
    {
        if (string.IsNullOrWhiteSpace(status))
        {
            isAdopted = null;
            StateHasChanged();
        }
        else
        {
            if (status.Equals(AdoptionStatusConstants.Adopted))
            {
                isAdopted = true;
                StateHasChanged();
            }
            else if (status.Equals(AdoptionStatusConstants.ToAdopt))
            {
                isAdopted = false;
                StateHasChanged();
            }
            else
            {
                isAdopted = null;
                StateHasChanged();
            }
        }
    }

    protected async Task UpdateCity(string? chosenCity)
    {
        city = chosenCity;
        StateHasChanged();
    }
    
    protected async Task UpdateProvince(string? chosenProvince)
    {
        province = chosenProvince;
        StateHasChanged();
    }
}
