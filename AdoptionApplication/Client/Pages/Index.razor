@page "/"
@page "/{speciesUrl}"
@inject ISpeciesService SpeciesService
@inject IAnimalService AnimalService

@if(species != null)
{
    <h1>Tutaj znajdziesz @species.Name do adopcji!</h1>
     <AnimalsList />
}   
else
{
    <h1>Zapoznaj się ze zwierzakami, które szukają domu!</h1>
    <AnimalsList />
}

<Pagination>
    <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
        <PaginationLink>
            <span aria-hidden="true">«</span>
        </PaginationLink>
    </PaginationItem>
    @{
        for (var i = 1; i <= pageItems; i++)
        {
            var pageNumberAsString = i.ToString();
                    <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                        <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                    @pageNumberAsString
                        </PaginationLink>
                    </PaginationItem>
        } 
    }
    <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
        <PaginationLink>
            <span aria-hidden="true">»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

@code{
    [Parameter]
    public string SpeciesUrl { get; set; }

    private Species species = null;
    private string currentPage = "1";

    protected override async Task OnParametersSetAsync()
    {
        currentPage = "1";
        var total = await AnimalService.LoadAnimalsAsync(Int32.Parse(currentPage), SpeciesUrl);
        pageItems = total / PaginationService.PageItems;

        if (SpeciesUrl != null)
            species = SpeciesService.Species.FirstOrDefault(x => x.Url.ToLower().Equals(SpeciesUrl.ToLower()));
        else
            species = null;
    }

    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private int pageItems = 10;

    private bool IsActive(string page)
    {
       return currentPage == page;
    }

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private async Task Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
            await AnimalService.LoadAnimalsAsync(Int32.Parse(currentPage), SpeciesUrl);
        }
    }

    private async Task Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems)
        {
            currentPage = (currentPageAsInt + 1).ToString();
            await AnimalService.LoadAnimalsAsync(Int32.Parse(currentPage), SpeciesUrl);
        }
    }

    private void SetActive(string page)
        => currentPage = page;
}