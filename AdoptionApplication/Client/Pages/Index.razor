@page "/"
@page "/{speciesUrl}"
@inject ISpeciesService SpeciesService
@inject IAnimalService AnimalService

@if(species != null)
{
    <div class="shadow p-3 mb-5 bg-white rounded">
        <h1>Tutaj znajdziesz @species.Name do adopcji!</h1>
    </div>
}   
else
{
    <div class="shadow p-3 mb-5 bg-white rounded">
        <h1>Zapoznaj się ze zwierzętami, które szukają domu!!</h1>
    </div> 
}

<div class="form-row">
    <div class="form-group col-md-3 col-lg-2">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownCityButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Miasto
            </button>
            <div class="dropdown-menu w-100" aria-labelledby="dropdownCityButton">
                <button class="dropdown-item" @onclick="() => UpdateCity(null)">Wszystkie</button>
                @foreach (var city in Cities)
                {
                    <button class="dropdown-item" @onclick="() => UpdateCity(city)">@city</button>
                }
            </div>
        </div>
    </div>
    <div class="form-group col-md-3 col-lg-2">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownProvinceButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Województwo
            </button>
            <div class="dropdown-menu w-100" aria-labelledby="dropdownProvinceButton">
                <button class="dropdown-item" @onclick="() => UpdateProvince(null)">Wszystkie</button>
                @foreach (var province in Provinces)
                {
                    <button class="dropdown-item" @onclick="() => UpdateProvince(province)">@province</button>
                }
            </div>
        </div>
    </div>
    <div class="form-group col-md-3 col-lg-2">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownAdoptionStatusButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Status adopcji
            </button>
            <div class="dropdown-menu w-100" aria-labelledby="dropdownAdoptionStatusButton">
                <button class="dropdown-item" @onclick="() => UpdateAdoptionStatus(null)">Wszystkie</button>
                <button class="dropdown-item" @onclick="() => UpdateAdoptionStatus(AdoptionStatusConstants.Adopted)">Adoptowane</button>
                <button class="dropdown-item" @onclick="() => UpdateAdoptionStatus(AdoptionStatusConstants.ToAdopt)">Szukające domu</button>
            </div>
        </div>
    </div>
</div>
 <AnimalsList />

<Pagination>
    <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
        <PaginationLink>
            <span aria-hidden="true">«</span>
        </PaginationLink>
    </PaginationItem>
    @{
        for (var i = 1; i <= pageItems; i++)
        {
            var pageNumberAsString = i.ToString();
                    <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                        <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                    @pageNumberAsString
                        </PaginationLink>
                    </PaginationItem>
        } 
    }
    <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
        <PaginationLink>
            <span aria-hidden="true">»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

@code{
    [Parameter]
    public string SpeciesUrl { get; set; }
    
    private string currentPage = "1";
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private int pageItems = 1;
    private bool? isAdopted;
    private string? city;
    private string? province;
    
    public List<string?> Provinces { get; set; } = new();
    public List<string?> Cities { get; set; } = new();

    private Species species = null;

    protected override async Task OnParametersSetAsync()
    {
        currentPage = "1";
        province = null;
        isAdopted = null;
        city = null;
        await UpdateAnimalList();
        Provinces = AnimalService.Animals.Select(x => x.Province).Distinct().ToList();
        Cities = AnimalService.Animals.Select(x => x.City).Distinct().ToList();

        if (SpeciesUrl != null)
            species = SpeciesService.Species.FirstOrDefault(x => x.Url.ToLower().Equals(SpeciesUrl.ToLower()));
        else
            species = null;
    }

    private async Task UpdateAnimalList()
    {
        var total = await AnimalService.LoadAnimalsAsync(Int32.Parse(currentPage), isAdopted, city, province, SpeciesUrl);
        pageItems = (int)Math.Round(total / (decimal) PaginationService.PageItems, MidpointRounding.ToPositiveInfinity);
    }
    
    private bool IsActive(string page)
    {
       return currentPage == page;
    }

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private async Task Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
            await UpdateAnimalList();
        }
    }

    private async Task Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems)
        {
            currentPage = (currentPageAsInt + 1).ToString();
            await UpdateAnimalList();
        }
    }

    private async Task SetActive(string page)
    {
        currentPage = page;
        await UpdateAnimalList();
    }
    
    protected async Task UpdateAdoptionStatus(string? status)
    {
        if (string.IsNullOrWhiteSpace(status))
        {
            isAdopted = null;
            await UpdateAnimalList();
            StateHasChanged();
        }
        else
        {
            if (status.Equals(AdoptionStatusConstants.Adopted))
            {
                isAdopted = true;
                await UpdateAnimalList();
                StateHasChanged();
            }
            else if (status.Equals(AdoptionStatusConstants.ToAdopt))
            {
                isAdopted = false;
                await UpdateAnimalList();
                StateHasChanged();
            }
            else
            {
                isAdopted = null;
                await UpdateAnimalList();
                StateHasChanged();
            }
        }
    }

    protected async Task UpdateCity(string? chosenCity)
    {
        city = chosenCity;
        await UpdateAnimalList();
        StateHasChanged();
    }
    
    protected async Task UpdateProvince(string? chosenProvince)
    {
        province = chosenProvince;
        await UpdateAnimalList();
        StateHasChanged();
    }
}